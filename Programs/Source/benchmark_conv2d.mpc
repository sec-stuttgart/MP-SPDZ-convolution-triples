import sys
from ml import Tensor
from Compiler.instructions import *
import functools

if len(program.args) < 4:
   print('Usage: %s <approach> <image_size> <depth> <count> [<filter_size>] [<output_depth>] [stride]' % program.args[0], file=sys.stderr)
   exit(1)

approach = program.args[1].upper()
image_size = int(program.args[2])
depth = int(program.args[3])
count = int(program.args[4])
try:
    filter_size = int(program.args[5])
except (ValueError, IndexError):
    filter_size = 3
try:
    output_depth = int(program.args[6])
    if output_depth != depth:
        assert count == 1
except (ValueError, IndexError):
    output_depth = depth
try:
    stride = int(program.args[7])
except (ValueError, IndexError):
    stride = 1

depthwise = "DEPTH" in approach
if depthwise:
    assert depth == output_depth

shape = (1, image_size, image_size, depth)
if depthwise:
    filter = (filter_size, filter_size, depth)
else:
    filter = (output_depth, filter_size, filter_size, depth)
assert image_size % stride == 0
output = (1, image_size // stride, image_size // stride, output_depth)
stride = (stride, stride)
padding = (filter_size // 2, filter_size // 2)

size = lambda s: functools.reduce(lambda a, b: a * b, s)

def matrix_conv2ds(matmul, result, inputs, weights, output_h, output_w, inputs_h, inputs_w, weights_h, weights_w, stride_h, stride_w, n_channels_in, padding_h, padding_w, n_channels_out):
    from Compiler.util import is_zero
    A = sint.Tensor((output_h, output_w, weights_h, weights_w, n_channels_in))
    B = sint.Tensor((weights_h, weights_w, n_channels_in, n_channels_out))
    for oi in range(output_h):
        for oj in range(output_w):
            i = (oi * stride_w) - padding_w
            j = (oj * stride_h) - padding_h
            for di in range(weights_h):
                y = i + di
                inside_y = (0 <= y) * (y < inputs_h)
                for dj in range(weights_w):
                    x = j + dj
                    inside_x = (0 <= x) * (x < inputs_w)
                    inside = inside_y * inside_x
                    if is_zero(inside):
                        continue
                    A.assign_vector_by_indices(inputs.get_vector_by_indices(0, y, x, None), oi, oj, di, dj, None)
    for di in range(weights_h):
        for dj in range(weights_w):
            for c in range(n_channels_in):
                B.assign_vector_by_indices(weights.get_vector_by_indices(None, di, dj, c), di, dj, c, None)
    matmul(result, A.get_vector(), B.get_vector(), output_h * output_w, weights_h * weights_w * n_channels_in, n_channels_out)

a = Tensor(shape, sint)
f = Tensor(filter, sint)
y = Tensor(output, sint)
a.assign_vector(sint(size=size(shape)))
f.assign_vector(sint(size=size(filter)))
for _ in range(count):
    if "BASE" in approach:
        # y.assign_vector(sint(0, size=size(output)))
        for d in range(output[3]):
            if depthwise:
                res = sint(size=size(output[1:3]))
                conv2ds(res, a.get_vector_by_indices(None, None, None, d), f.get_vector_by_indices(None, None, d), output[1], output[2], shape[1], shape[2], filter[0], filter[1], stride[0], stride[1], 1, padding[0], padding[1], shape[0])
            else:
                res = sint(size=size(output[1:3]))
                conv2ds(res, a.get_vector(), f.get_vector_by_indices(d, None, None, None), output[1], output[2], shape[1], shape[2], filter[1], filter[2], stride[0], stride[1], shape[3], padding[0], padding[1], shape[0])
            y.assign_vector_by_indices(res, None, None, None, d)
    elif "CONV2D" in approach:
        if "EMULATE" in approach:
            assert depthwise
            for d in range(depth):
                res = sint(size=size(output[1:3]))
                vconv2ds(convolution_desc(res, a.get_vector_by_indices(None, None, None, d), (1, image_size, image_size, 1), f.get_vector_by_indices(None, None, d), (1, filter_size, filter_size, 1), padding, stride))
                y.assign_vector_by_indices(res, None, None, None, d)
        else:
            res = sint(size=size(output))
            vconv2ds(convolution_desc(res, a.get_vector(), shape, f.get_vector(), filter, padding, stride))
            y.assign_vector(res)
    elif "MATMUL" in approach:
        if filter_size == 1 and not depthwise:
            res = sint(size=size(output))
            vmatmuls(matmul_desc(res, a.get_vector(), f.get_vector(), image_size * image_size, depth, output_depth))
            y.assign_vector(res)
        elif not depthwise:
            res = sint(size=size(output))
            matrix_conv2ds(lambda *x: vmatmuls(matmul_desc(*x)), 
                res,
                a,
                f,
                output[1], output[2],
                image_size, image_size,
                filter_size, filter_size,
                stride[0], stride[1],
                depth,
                padding[0], padding[1],
                output_depth)
            y.assign_vector(res)
        else:
            assert depthwise
            for d in range(depth):
                res = sint(size=size((1, output[1], output[2], 1)))
                A = Tensor((1, image_size, image_size, 1), sint)
                A.assign_vector(a.get_vector_by_indices(None, None, None, d))
                F = Tensor((1, filter_size, filter_size, 1), sint)
                F.assign_vector(f.get_vector_by_indices(None, None, d))
                matrix_conv2ds(lambda *x: vmatmuls(matmul_desc(*x)), 
                    res,
                    A,
                    F,
                    output[1], output[2],
                    image_size, image_size,
                    filter_size, filter_size,
                    stride[0], stride[1],
                    1,
                    padding[0], padding[1],
                    1)
            y.assign_vector_by_indices(res, None, None, None, d)
    else:
        print('Invalid approach: %s' % program.args[1], file=sys.stderr)
        exit(1)
    a = y
    y = Tensor(output, sint)