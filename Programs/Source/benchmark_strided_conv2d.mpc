import sys
from ml import Tensor
from Compiler.instructions import *
import functools
# ./Scripts/benchmark.py 30 4 1 --approaches "[('base-depthwise','cowgear'),('conv2d-depthwise','cowgear'),('conv2d-depthwise','cowgear-expanded-circulant-NOMASK'),('conv2d-depthwise','cowgear-expanded-circulant'),('conv2d-depthwise','cowgear-expanded-NOMASK'),('conv2d-depthwise','cowgear-expanded')]"

# ./cowgear-expanded-party.x 0 benchmark_conv2d-depth-conv2d-22-10-1 > out.0.log &
# ./cowgear-expanded-party.x 1 benchmark_conv2d-depth-conv2d-22-10-1 > out.1.log &
# ./cowgear-expanded-circulant-party.x 0 -pn 5050 benchmark_conv2d-depth-conv2d-22-10-1 > out.0-c.log &
# ./cowgear-expanded-circulant-party.x 1 -pn 5050 benchmark_conv2d-depth-conv2d-22-10-1 > out.1-c.log &

if len(program.args) < 4:
   print('Usage: %s <approach> <image_size> <depth> <count> [<filter_size>] [<output_depth>] [stride]' % program.args[0], file=sys.stderr)
   exit(1)

approach = program.args[1].upper()
image_size = int(program.args[2])
depth = int(program.args[3])
count = int(program.args[4])
try:
    filter_size = int(program.args[5])
except (ValueError, IndexError):
    filter_size = 3
try:
    output_depth = int(program.args[6])
    if output_depth != depth:
        assert count == 1
except (ValueError, IndexError):
    output_depth = depth
try:
    stride = int(program.args[7])
except (ValueError, IndexError):
    stride = 1

depthwise = "DEPTH" in approach

shape = (1, image_size, image_size, depth)
if depthwise:
    filter = (filter_size, filter_size, depth)
else:
    filter = (output_depth, filter_size, filter_size, depth)
assert image_size % stride == 0
output = (1, image_size // stride, image_size // stride, output_depth)
stride = (stride, stride)
padding = (filter_size // 2, filter_size // 2)

size = lambda s: functools.reduce(lambda a, b: a * b, s)

a = Tensor(shape, sint)
f = Tensor(filter, sint)
y = Tensor(output, sint)
a.assign_vector(sint(size=size(shape)))
f.assign_vector(sint(size=size(filter)))
for _ in range(count):
    if "BASE" in approach:
        # y.assign_vector(sint(0, size=size(output)))
        for d in range(output[3]):
            if depthwise:
                res = sint(size=size(output[1:3]))
                conv2ds(res, a.get_vector_by_indices(None, None, None, d), f.get_vector_by_indices(None, None, d), output[1], output[2], shape[1], shape[2], filter[0], filter[1], stride[0], stride[1], 1, padding[0], padding[1], shape[0])
            else:
                res = sint(size=size(output[1:3]))
                conv2ds(res, a.get_vector(), f.get_vector_by_indices(d, None, None, None), output[1], output[2], shape[1], shape[2], filter[1], filter[2], stride[0], stride[1], shape[3], padding[0], padding[1], shape[0])
            y.assign_vector_by_indices(res, None, None, None, d)
    elif "CONV2D" in approach:
        res = sint(size=size(output))
        c = vconv2ds(convolution_desc(res, a.get_vector(), shape, f.get_vector(), filter, padding, stride))
        y.assign_vector(res)
    elif "MATMUL" in approach:
        assert filter_size == 1
        assert not depthwise
        res = sint(size=size(output))
        vmatmuls(matmul_desc(res, a.get_vector(), f.get_vector(), image_size * image_size, depth, output_depth))
        y.assign_vector(res)
    else:
        print('Invalid approach: %s' % program.args[1], file=sys.stderr)
        exit(1)
    a = y
    y = Tensor(output, sint)