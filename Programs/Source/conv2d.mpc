
import functools
import itertools

from Compiler.instructions import conv2ds, convolution_desc, vconv2ds

import sys

from Compiler.ml import Tensor

depth = 16

shape = (1, 28, 28, depth)
filter = (depth, 3, 3, depth)
output = (1, 28, 28, depth)
stride = (1,1)
padding = (1,1)

size = lambda s: functools.reduce(lambda a, b: a * b, s)


a = Tensor(shape, sint)
f = Tensor(filter, sint)
y = Tensor(output, sint)
a.assign_vector(sint(list(range(1, size(shape)+1)),size=size(shape)))
f.assign_vector(sint(list(range(size(shape)+1,size(shape)+size(filter)+1)),size=size(filter)))
y.assign_vector(sint(0, size=size(output)))
start_timer(1)
for d in range(output[3]):
    res = sint(size=size(output[1:3]))
    conv2ds(res, a.get_vector(), f.get_vector_by_indices(d, None, None, None), output[1], output[2], shape[1], shape[2], filter[1], filter[2], stride[0], stride[1], shape[3], padding[0], padding[1], shape[0])
    y.assign_vector_by_indices(res, None, None, None, d)
stop_timer(1)
# print_ln(" conv2d: %s", y.reveal_nested())

start_timer(2)
res = sint(size=size(output))
vconv2ds(convolution_desc(res, a.get_vector(), shape, f.get_vector(), filter, padding, stride))
y.assign_vector(res)
stop_timer(2)
# print_ln("vconv2d: %s", y.reveal_nested())